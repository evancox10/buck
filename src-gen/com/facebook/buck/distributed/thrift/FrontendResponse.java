/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-12")
public class FrontendResponse implements org.apache.thrift.TBase<FrontendResponse, FrontendResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FrontendResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FrontendResponse");

  private static final org.apache.thrift.protocol.TField WAS_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("wasSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_BUILD_FIELD_DESC = new org.apache.thrift.protocol.TField("startBuild", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField BUILD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("buildStatus", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField ANALYSE_RULE_KEYS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("analyseRuleKeysResponse", org.apache.thrift.protocol.TType.STRUCT, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FrontendResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FrontendResponseTupleSchemeFactory());
  }

  public boolean wasSuccessful; // optional
  public String errorMessage; // optional
  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType type; // optional
  public StartBuildResponse startBuild; // optional
  public BuildStatusResponse buildStatus; // optional
  public AnalyseRuleKeysResponse analyseRuleKeysResponse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAS_SUCCESSFUL((short)1, "wasSuccessful"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    /**
     * 
     * @see FrontendRequestType
     */
    TYPE((short)10, "type"),
    START_BUILD((short)11, "startBuild"),
    BUILD_STATUS((short)12, "buildStatus"),
    ANALYSE_RULE_KEYS_RESPONSE((short)15, "analyseRuleKeysResponse");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAS_SUCCESSFUL
          return WAS_SUCCESSFUL;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 10: // TYPE
          return TYPE;
        case 11: // START_BUILD
          return START_BUILD;
        case 12: // BUILD_STATUS
          return BUILD_STATUS;
        case 15: // ANALYSE_RULE_KEYS_RESPONSE
          return ANALYSE_RULE_KEYS_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WASSUCCESSFUL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WAS_SUCCESSFUL,_Fields.ERROR_MESSAGE,_Fields.TYPE,_Fields.START_BUILD,_Fields.BUILD_STATUS,_Fields.ANALYSE_RULE_KEYS_RESPONSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAS_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("wasSuccessful", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendRequestType.class)));
    tmpMap.put(_Fields.START_BUILD, new org.apache.thrift.meta_data.FieldMetaData("startBuild", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartBuildResponse.class)));
    tmpMap.put(_Fields.BUILD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("buildStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildStatusResponse.class)));
    tmpMap.put(_Fields.ANALYSE_RULE_KEYS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("analyseRuleKeysResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalyseRuleKeysResponse.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FrontendResponse.class, metaDataMap);
  }

  public FrontendResponse() {
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FrontendResponse(FrontendResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wasSuccessful = other.wasSuccessful;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStartBuild()) {
      this.startBuild = new StartBuildResponse(other.startBuild);
    }
    if (other.isSetBuildStatus()) {
      this.buildStatus = new BuildStatusResponse(other.buildStatus);
    }
    if (other.isSetAnalyseRuleKeysResponse()) {
      this.analyseRuleKeysResponse = new AnalyseRuleKeysResponse(other.analyseRuleKeysResponse);
    }
  }

  public FrontendResponse deepCopy() {
    return new FrontendResponse(this);
  }

  @Override
  public void clear() {
    setWasSuccessfulIsSet(false);
    this.wasSuccessful = false;
    this.errorMessage = null;
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

    this.startBuild = null;
    this.buildStatus = null;
    this.analyseRuleKeysResponse = null;
  }

  public boolean isWasSuccessful() {
    return this.wasSuccessful;
  }

  public FrontendResponse setWasSuccessful(boolean wasSuccessful) {
    this.wasSuccessful = wasSuccessful;
    setWasSuccessfulIsSet(true);
    return this;
  }

  public void unsetWasSuccessful() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  /** Returns true if field wasSuccessful is set (has been assigned a value) and false otherwise */
  public boolean isSetWasSuccessful() {
    return EncodingUtils.testBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  public void setWasSuccessfulIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID, value);
  }

  public String getErrorMessage() {
    return this.errorMessage;
  }

  public FrontendResponse setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendResponse setType(FrontendRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public StartBuildResponse getStartBuild() {
    return this.startBuild;
  }

  public FrontendResponse setStartBuild(StartBuildResponse startBuild) {
    this.startBuild = startBuild;
    return this;
  }

  public void unsetStartBuild() {
    this.startBuild = null;
  }

  /** Returns true if field startBuild is set (has been assigned a value) and false otherwise */
  public boolean isSetStartBuild() {
    return this.startBuild != null;
  }

  public void setStartBuildIsSet(boolean value) {
    if (!value) {
      this.startBuild = null;
    }
  }

  public BuildStatusResponse getBuildStatus() {
    return this.buildStatus;
  }

  public FrontendResponse setBuildStatus(BuildStatusResponse buildStatus) {
    this.buildStatus = buildStatus;
    return this;
  }

  public void unsetBuildStatus() {
    this.buildStatus = null;
  }

  /** Returns true if field buildStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildStatus() {
    return this.buildStatus != null;
  }

  public void setBuildStatusIsSet(boolean value) {
    if (!value) {
      this.buildStatus = null;
    }
  }

  public AnalyseRuleKeysResponse getAnalyseRuleKeysResponse() {
    return this.analyseRuleKeysResponse;
  }

  public FrontendResponse setAnalyseRuleKeysResponse(AnalyseRuleKeysResponse analyseRuleKeysResponse) {
    this.analyseRuleKeysResponse = analyseRuleKeysResponse;
    return this;
  }

  public void unsetAnalyseRuleKeysResponse() {
    this.analyseRuleKeysResponse = null;
  }

  /** Returns true if field analyseRuleKeysResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalyseRuleKeysResponse() {
    return this.analyseRuleKeysResponse != null;
  }

  public void setAnalyseRuleKeysResponseIsSet(boolean value) {
    if (!value) {
      this.analyseRuleKeysResponse = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WAS_SUCCESSFUL:
      if (value == null) {
        unsetWasSuccessful();
      } else {
        setWasSuccessful((Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FrontendRequestType)value);
      }
      break;

    case START_BUILD:
      if (value == null) {
        unsetStartBuild();
      } else {
        setStartBuild((StartBuildResponse)value);
      }
      break;

    case BUILD_STATUS:
      if (value == null) {
        unsetBuildStatus();
      } else {
        setBuildStatus((BuildStatusResponse)value);
      }
      break;

    case ANALYSE_RULE_KEYS_RESPONSE:
      if (value == null) {
        unsetAnalyseRuleKeysResponse();
      } else {
        setAnalyseRuleKeysResponse((AnalyseRuleKeysResponse)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WAS_SUCCESSFUL:
      return isWasSuccessful();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case TYPE:
      return getType();

    case START_BUILD:
      return getStartBuild();

    case BUILD_STATUS:
      return getBuildStatus();

    case ANALYSE_RULE_KEYS_RESPONSE:
      return getAnalyseRuleKeysResponse();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WAS_SUCCESSFUL:
      return isSetWasSuccessful();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case TYPE:
      return isSetType();
    case START_BUILD:
      return isSetStartBuild();
    case BUILD_STATUS:
      return isSetBuildStatus();
    case ANALYSE_RULE_KEYS_RESPONSE:
      return isSetAnalyseRuleKeysResponse();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FrontendResponse)
      return this.equals((FrontendResponse)that);
    return false;
  }

  public boolean equals(FrontendResponse that) {
    if (that == null)
      return false;

    boolean this_present_wasSuccessful = true && this.isSetWasSuccessful();
    boolean that_present_wasSuccessful = true && that.isSetWasSuccessful();
    if (this_present_wasSuccessful || that_present_wasSuccessful) {
      if (!(this_present_wasSuccessful && that_present_wasSuccessful))
        return false;
      if (this.wasSuccessful != that.wasSuccessful)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_startBuild = true && this.isSetStartBuild();
    boolean that_present_startBuild = true && that.isSetStartBuild();
    if (this_present_startBuild || that_present_startBuild) {
      if (!(this_present_startBuild && that_present_startBuild))
        return false;
      if (!this.startBuild.equals(that.startBuild))
        return false;
    }

    boolean this_present_buildStatus = true && this.isSetBuildStatus();
    boolean that_present_buildStatus = true && that.isSetBuildStatus();
    if (this_present_buildStatus || that_present_buildStatus) {
      if (!(this_present_buildStatus && that_present_buildStatus))
        return false;
      if (!this.buildStatus.equals(that.buildStatus))
        return false;
    }

    boolean this_present_analyseRuleKeysResponse = true && this.isSetAnalyseRuleKeysResponse();
    boolean that_present_analyseRuleKeysResponse = true && that.isSetAnalyseRuleKeysResponse();
    if (this_present_analyseRuleKeysResponse || that_present_analyseRuleKeysResponse) {
      if (!(this_present_analyseRuleKeysResponse && that_present_analyseRuleKeysResponse))
        return false;
      if (!this.analyseRuleKeysResponse.equals(that.analyseRuleKeysResponse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wasSuccessful = true && (isSetWasSuccessful());
    list.add(present_wasSuccessful);
    if (present_wasSuccessful)
      list.add(wasSuccessful);

    boolean present_errorMessage = true && (isSetErrorMessage());
    list.add(present_errorMessage);
    if (present_errorMessage)
      list.add(errorMessage);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_startBuild = true && (isSetStartBuild());
    list.add(present_startBuild);
    if (present_startBuild)
      list.add(startBuild);

    boolean present_buildStatus = true && (isSetBuildStatus());
    list.add(present_buildStatus);
    if (present_buildStatus)
      list.add(buildStatus);

    boolean present_analyseRuleKeysResponse = true && (isSetAnalyseRuleKeysResponse());
    list.add(present_analyseRuleKeysResponse);
    if (present_analyseRuleKeysResponse)
      list.add(analyseRuleKeysResponse);

    return list.hashCode();
  }

  @Override
  public int compareTo(FrontendResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWasSuccessful()).compareTo(other.isSetWasSuccessful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWasSuccessful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wasSuccessful, other.wasSuccessful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartBuild()).compareTo(other.isSetStartBuild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartBuild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startBuild, other.startBuild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuildStatus()).compareTo(other.isSetBuildStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildStatus, other.buildStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalyseRuleKeysResponse()).compareTo(other.isSetAnalyseRuleKeysResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalyseRuleKeysResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analyseRuleKeysResponse, other.analyseRuleKeysResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FrontendResponse(");
    boolean first = true;

    if (isSetWasSuccessful()) {
      sb.append("wasSuccessful:");
      sb.append(this.wasSuccessful);
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetStartBuild()) {
      if (!first) sb.append(", ");
      sb.append("startBuild:");
      if (this.startBuild == null) {
        sb.append("null");
      } else {
        sb.append(this.startBuild);
      }
      first = false;
    }
    if (isSetBuildStatus()) {
      if (!first) sb.append(", ");
      sb.append("buildStatus:");
      if (this.buildStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.buildStatus);
      }
      first = false;
    }
    if (isSetAnalyseRuleKeysResponse()) {
      if (!first) sb.append(", ");
      sb.append("analyseRuleKeysResponse:");
      if (this.analyseRuleKeysResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.analyseRuleKeysResponse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startBuild != null) {
      startBuild.validate();
    }
    if (buildStatus != null) {
      buildStatus.validate();
    }
    if (analyseRuleKeysResponse != null) {
      analyseRuleKeysResponse.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FrontendResponseStandardSchemeFactory implements SchemeFactory {
    public FrontendResponseStandardScheme getScheme() {
      return new FrontendResponseStandardScheme();
    }
  }

  private static class FrontendResponseStandardScheme extends StandardScheme<FrontendResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FrontendResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAS_SUCCESSFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wasSuccessful = iprot.readBool();
              struct.setWasSuccessfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_BUILD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startBuild = new StartBuildResponse();
              struct.startBuild.read(iprot);
              struct.setStartBuildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUILD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buildStatus = new BuildStatusResponse();
              struct.buildStatus.read(iprot);
              struct.setBuildStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ANALYSE_RULE_KEYS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.analyseRuleKeysResponse = new AnalyseRuleKeysResponse();
              struct.analyseRuleKeysResponse.read(iprot);
              struct.setAnalyseRuleKeysResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FrontendResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWasSuccessful()) {
        oprot.writeFieldBegin(WAS_SUCCESSFUL_FIELD_DESC);
        oprot.writeBool(struct.wasSuccessful);
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startBuild != null) {
        if (struct.isSetStartBuild()) {
          oprot.writeFieldBegin(START_BUILD_FIELD_DESC);
          struct.startBuild.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildStatus != null) {
        if (struct.isSetBuildStatus()) {
          oprot.writeFieldBegin(BUILD_STATUS_FIELD_DESC);
          struct.buildStatus.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analyseRuleKeysResponse != null) {
        if (struct.isSetAnalyseRuleKeysResponse()) {
          oprot.writeFieldBegin(ANALYSE_RULE_KEYS_RESPONSE_FIELD_DESC);
          struct.analyseRuleKeysResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FrontendResponseTupleSchemeFactory implements SchemeFactory {
    public FrontendResponseTupleScheme getScheme() {
      return new FrontendResponseTupleScheme();
    }
  }

  private static class FrontendResponseTupleScheme extends TupleScheme<FrontendResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FrontendResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWasSuccessful()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetStartBuild()) {
        optionals.set(3);
      }
      if (struct.isSetBuildStatus()) {
        optionals.set(4);
      }
      if (struct.isSetAnalyseRuleKeysResponse()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetWasSuccessful()) {
        oprot.writeBool(struct.wasSuccessful);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetStartBuild()) {
        struct.startBuild.write(oprot);
      }
      if (struct.isSetBuildStatus()) {
        struct.buildStatus.write(oprot);
      }
      if (struct.isSetAnalyseRuleKeysResponse()) {
        struct.analyseRuleKeysResponse.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FrontendResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.wasSuccessful = iprot.readBool();
        struct.setWasSuccessfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startBuild = new StartBuildResponse();
        struct.startBuild.read(iprot);
        struct.setStartBuildIsSet(true);
      }
      if (incoming.get(4)) {
        struct.buildStatus = new BuildStatusResponse();
        struct.buildStatus.read(iprot);
        struct.setBuildStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.analyseRuleKeysResponse = new AnalyseRuleKeysResponse();
        struct.analyseRuleKeysResponse.read(iprot);
        struct.setAnalyseRuleKeysResponseIsSet(true);
      }
    }
  }

}

